# !pip install python-telegram-bot --upgrade
# !pip install nest_asyncio
# !pip install pytz

# import nest_asyncio
import requests
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from datetime import datetime, timedelta
# import pytz
import re

# √Åp d·ª•ng nest_asyncio
# nest_asyncio.apply()

# API key t·ª´ OpenWeatherMap
OPENWEATHERMAP_API_KEY = '<API_KEY_OPENWEATHERMAP>'

# H√†m b·∫Øt ƒë·∫ßu bot
async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    first_name = user.first_name

    await update.message.reply_text(f'Xin ch√†o <b>{first_name}</b>!\n'
                                    'G√µ /help ƒë·ªÉ xem danh s√°ch c√°c l·ªánh m√† bot h·ªó tr·ª£ nh√©.\n'
                                    'B·∫°n c≈©ng c√≥ th·ªÉ truy c·∫≠p nhanh c√°c ch·ª©c nƒÉng b·∫±ng c√°ch nh·∫•n n√∫t Menu b√™n d∆∞·ªõi.\n'
                                    'N·∫øu th·∫•y bot h·ªØu √≠ch, h√£y gi√∫p m√¨nh chia s·∫ª v·ªõi b·∫°n b√® nh√©! üíö\n'
                                    'üëá (Menu)', parse_mode='HTML')

#H√†m help
async def help(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(f'üîñ Danh s√°ch l·ªánh:\n'
                                    '\n/random - T·∫°o s·ªë ng·∫´u nhi√™n\n'
                                    '/sleep - T√≠nh chu k·ª≥ gi·∫•c ng·ªß\n'
                                    '/weather - D·ª± b√°o th·ªùi ti·∫øt\n'
                                    '/tinh - T√≠nh to√°n ƒë∆°n gi·∫£n')

# H√†m l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ OpenWeatherMap
def get_weather(city: str) -> str:
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=vi'
    response = requests.get(url)
    data = response.json()

    if data['cod'] != 200:
        return "Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho th√†nh ph·ªë n√†y."

    weather_desc = data['weather'][0]['description']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    wind_speed = data['wind']['speed']

    weather_info = (f"Th·ªùi ti·∫øt ·ªü {city}:\n"
                    f"M√¥ t·∫£: {weather_desc}\n"
                    f"Nhi·ªát ƒë·ªô: {temp}¬∞C\n"
                    f"C·∫£m gi√°c nh∆∞: {feels_like}¬∞C\n"
                    f"ƒê·ªô ·∫©m: {humidity}%\n"
                    f"T·ªëc ƒë·ªô gi√≥: {wind_speed} m/s")

    return weather_info

# H√†m x·ª≠ l√Ω l·ªánh /weather
async def weather(update: Update, context: CallbackContext) -> None:
    if context.args:
        city = ' '.join(context.args)
        weather_info = get_weather(city)
        await update.message.reply_text(weather_info)
    else:
        keyboard = [[InlineKeyboardButton("H√† N·ªôi", callback_data='H√† N·ªôi'),
                     InlineKeyboardButton("H·ªì Ch√≠ Minh", callback_data='Ho Chi Minh'),
                     InlineKeyboardButton("ƒê√† N·∫µng", callback_data='ƒê√† N·∫µng')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            'S·ª≠ d·ª•ng c√∫ ph√°p /weather <t√™n th√†nh ph·ªë> ho·∫∑c ch·ªçn c√°c th√†nh ph·ªë l·ªõn ·ªü d∆∞·ªõi ƒë·ªÉ xem th·ªùi ti·∫øt.',
            reply_markup=reply_markup)

# H√†m x·ª≠ l√Ω callback khi nh·∫•n n√∫t ch·ªçn th√†nh ph·ªë
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    city = query.data
    weather_info = get_weather(city)
    await query.edit_message_text(text=weather_info)

# H√†m x·ª≠ l√Ω l·ªánh /random
async def random_number(update: Update, context: CallbackContext) -> None:
    try:
        args = context.args
        if len(args) != 2:
            raise ValueError("Invalid number of arguments")
        min_val = int(args[0])
        max_val = int(args[1])
        random_num = random.randint(min_val, max_val)
        await update.message.reply_text(f'üé≤ S·ªë ng·∫´u nhi√™n: {random_num}')
    except (ValueError, IndexError):
        await update.message.reply_text('S·ª≠ d·ª•ng c√∫ ph√°p /random <s·ªë nh·ªè nh·∫•t> <s·ªë l·ªõn nh·∫•t> ƒë·ªÉ t·∫°o s·ªë ng·∫´u nhi√™n.')

# H√†m x·ª≠ l√Ω l·ªánh /sleep
async def sleep(update: Update, context: CallbackContext) -> None:
    # L·∫•y m√∫i gi·ªù cho H√† N·ªôi
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(tz)  # Th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù H√† N·ªôi
    current_time = now.strftime('%I:%M %p')  # ƒê·ªãnh d·∫°ng th·ªùi gian hi·ªán t·∫°i
    sleep_cycles = [1.5, 3, 4.5, 6, 7.5, 9]
    wake_up_times = [(now + timedelta(hours=cycle)).strftime('%I:%M %p') for cycle in sleep_cycles]

    response = f"B√¢y gi·ªù l√† {current_time}.\n\nN·∫øu b·∫°n ƒëi ng·ªß ngay b√¢y gi·ªù, b·∫°n n√™n c·ªë g·∫Øng th·ª©c d·∫≠y v√†o m·ªôt trong nh·ªØng th·ªùi ƒëi·ªÉm sau:\n\n"
    for i, time in enumerate(wake_up_times):
        response += f"‚è∞ {time} cho {i + 1} chu k·ª≥ - ng·ªß {sleep_cycles[i]} ti·∫øng.\n"

    response += "\nXin l∆∞u √Ω r·∫±ng b·∫°n n√™n ƒëi ng·ªß v√†o nh·ªØng th·ªùi ƒëi·ªÉm n√†y. Con ng∆∞·ªùi trung b√¨nh m·∫•t ~14 ph√∫t ƒë·ªÉ ƒëi v√†o gi·∫•c ng·ªß, v√¨ v·∫≠y h√£y l√™n k·∫ø ho·∫°ch cho ph√π h·ª£p!\n\nCh√∫c ng·ªß ngon! üò¥"
    await update.message.reply_text(response)

# H√†m an to√†n ƒë·ªÉ ƒë√°nh gi√° bi·ªÉu th·ª©c to√°n h·ªçc
def safe_eval(expr: str) -> float:
    allowed_operators = {'+', '-', '*', '/', '**', '(', ')'}
    # Ki·ªÉm tra xem bi·ªÉu th·ª©c ch·ªâ ch·ª©a c√°c k√Ω t·ª± cho ph√©p
    if not re.match(r'^[\d+\-*/().\s]+$', expr):
        raise ValueError("Bi·ªÉu th·ª©c ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá")

    # Ki·ªÉm tra xem ch·ªâ c√≥ c√°c to√°n t·ª≠ cho ph√©p trong bi·ªÉu th·ª©c
    tokens = re.split(r'(\D+)', expr)
    for token in tokens:
        token = token.strip()
        if token and not token.isdigit() and token not in allowed_operators:
            raise ValueError("Bi·ªÉu th·ª©c ch·ª©a to√°n t·ª≠ kh√¥ng h·ª£p l·ªá")

    # S·ª≠ d·ª•ng eval ƒë·ªÉ ƒë√°nh gi√° bi·ªÉu th·ª©c
    return eval(expr)


# H√†m x·ª≠ l√Ω l·ªánh /tinh
async def tinh(update: Update, context: CallbackContext) -> None:
    try:
        expression = ' '.join(context.args)
        if not expression:
            raise ValueError("Bi·ªÉu th·ª©c tr·ªëng")
        result = safe_eval(expression)
        await update.message.reply_text(f'K·∫øt qu·∫£: {result}')
    except Exception as e:
        await update.message.reply_text(f'S·ª≠ d·ª•ng c√∫ ph√°p /tinh <ph√©p to√°n>')

# H√†m x·ª≠ l√Ω tin nh·∫Øn
async def reply(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text
    await update.message.reply_text(f'B·∫°n v·ª´a n√≥i: {user_message}')

def main() -> None:
    # Nh·∫≠p m√£ th√¥ng b√°o c·ªßa b·∫°n t·∫°i ƒë√¢y
    token = '<TOKEN_TELEGRAM_BOT>'

    # T·∫°o application
    application = Application.builder().token(token).build()

    # ƒêƒÉng k√Ω c√°c handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("random", random_number))
    application.add_handler(CommandHandler("sleep", sleep))
    application.add_handler(CommandHandler("tinh", tinh))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))

    # B·∫Øt ƒë·∫ßu bot
    application.run_polling()

if __name__ == '__main__':
    main()
